# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['Model-1'].boundaryConditions['fix_x']
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='fix_x', 
    region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#10820000 #90000 #20 ]', ), )), u1=SET, u2=UNSET, u3=UNSET, ur1=
    UNSET, ur2=UNSET, ur3=UNSET)
mdb.ModelFromInputFile(inputFileName=
    '/home/damin/damin_research/NASA/Damin/DDEHM/UMAT_Hex_phase/tension_RVE9_fix_boundary.inp'
    , name='tension_RVE9_fix_boundary')
del mdb.models['tension_RVE9_fix_boundary'].boundaryConditions['Disp-BC-4']
mdb.models['tension_RVE9_fix_boundary'].DisplacementBC(amplitude=UNSET, 
    createStepName='Initial', distributionType=UNIFORM, fieldName='', 
    localCsys=None, name='fix_x', region=Region(
    nodes=mdb.models['tension_RVE9_fix_boundary'].rootAssembly.instances['PART-1-1'].nodes.getSequenceFromMask(
    mask=('[#f ]', ), )), u1=SET, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, 
    ur3=UNSET)
mdb.models['tension_RVE9_fix_boundary'].boundaryConditions['Disp-BC-2'].setValuesInStep(
    stepName='Step-1', ur1=0.0, ur2=0.0, ur3=0.0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='tension_RVE9_fix_boundary', 
    modelPrint=OFF, multiprocessingMode=DEFAULT, name=
    'tension_RVE9_fix_boundary', nodalOutputPrecision=SINGLE, numCpus=1, 
    numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=ANALYSIS, 
    userSubroutine='', waitHours=0, waitMinutes=0)
del mdb.models['tension_RVE9_fix_boundary']
del mdb.models['Model-1'].boundaryConditions['fix_z']
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='fix_z', 
    region=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    mask=('[#3ffff ]', ), ), 
    faces=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff:2 #7ff ]', ), ), 
    edges=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:3 #ff ]', ), ), 
    vertices=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), )), u1=UNSET, u2=UNSET, u3=SET, ur1=UNSET, 
    ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].parts['Part-1'].deleteMesh()
mdb.models['Model-1'].parts['Part-1'].seedPart(minSizeFactor=0.1, size=0.15)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:6 #fffffff0 #1fffff #0:11 #e0000000 #ffffffff #3fff ]', ), ), name=
    'grain1')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0 #fffe0000 #ffffffff #3 #0:20 #ffff0000 #ffffffff', ' #1 ]', ), ), 
    name='grain2')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:10 #ff800000 #ffffffff #ff #0:2 #fffffc00 #7ffffff ]', ), ), name=
    'grain3')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:7 #ffe00000 #ffffffff #3f #0:8 #fffff000 #1fffffff ]', ), ), name=
    'grain4')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:12 #ffffff00 #ffffffff:2 #3ff ]', ), ), name='grain5')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#ffffffff #1ffff #0:24 #fffffffe #3ffff ]', ), ), name='grain6')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:4 #fff80000 #ffffffff #f #0:14 #ffffc000 #7fffffff ]', ), ), name=
    'grain7')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:3 #fffffffc #7ffff #0:17 #80000000 #ffffffff #ffff ]', ), ), name=
    'grain8')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:9 #ffffffc0 #7fffff #0:5 #f8000000 #ffffffff #fff ]', ), ), name=
    'grain9')
mdb.models['Model-1'].rootAssembly.regenerate()
del mdb.models['Model-1'].boundaryConditions['fix_z']
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='fix_z', 
    region=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    mask=('[#3ffff ]', ), ), 
    faces=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#ffffffff:2 #7ff ]', ), ), 
    edges=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:3 #ff ]', ), ), 
    vertices=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#ffffffff #ffff ]', ), )), u1=UNSET, u2=UNSET, u3=SET, ur1=UNSET, 
    ur2=UNSET, ur3=UNSET)
