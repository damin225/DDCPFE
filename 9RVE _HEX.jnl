from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['Part-1'].deleteFeatures(('Partition face-5', 
    'Partition cell-9'))
del mdb.models['Model-1'].parts['Part-1'].features['Partition face-6']
del mdb.models['Model-1'].parts['Part-1'].features['Partition face-4']
del mdb.models['Model-1'].parts['Part-1'].features['Partition cell-6']
mdb.models['Model-1'].parts['Part-1'].deleteFeatures(('Partition face-3', 
    'Partition cell-8', 'Partition cell-7'))
del mdb.models['Model-1'].materials['Material-1']
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:6 #fffffff0 #1fffff #0:11 #e0000000 #ffffffff #3fff ]', ), ), name=
    'grain1')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0 #fffe0000 #ffffffff #3 #0:20 #ffff0000 #ffffffff', ' #1 ]', ), ), 
    name='grain2')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:10 #ff800000 #ffffffff #ff #0:2 #fffffc00 #7ffffff ]', ), ), name=
    'grain3')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:7 #ffe00000 #ffffffff #3f #0:8 #fffff000 #1fffffff ]', ), ), name=
    'grain4')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:12 #ffffff00 #ffffffff:2 #3ff ]', ), ), name='grain5')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#ffffffff #1ffff #0:24 #fffffffe #3ffff ]', ), ), name='grain6')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:4 #fff80000 #ffffffff #f #0:14 #ffffc000 #7fffffff ]', ), ), name=
    'grain7')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:3 #fffffffc #7ffff #0:17 #80000000 #ffffffff #ffff ]', ), ), name=
    'grain8')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:9 #ffffffc0 #7fffff #0:5 #f8000000 #ffffffff #fff ]', ), ), name=
    'grain9')
del mdb.models['Model-1'].parts['Part-1'].sets['grain11']
del mdb.models['Model-1'].parts['Part-1'].sets['grain10']
mdb.models['Model-1'].parts['Part-1'].deleteSets(setNames=('INTERFACE', 
    'INTERFACENODES', 'IntExtra', 'IntNodesExtra'))
mdb.models['Model-1'].Material(name='ELSET_1_DAMAGE')
mdb.models['Model-1'].materials['ELSET_1_DAMAGE'].Depvar(n=471)
mdb.models['Model-1'].materials['ELSET_1_DAMAGE'].UserMaterial(
    mechanicalConstants=(1.0, 1.0))
mdb.models['Model-1'].Material(name='ELSET_2_DAMAGE', objectToCopy=
    mdb.models['Model-1'].materials['ELSET_1_DAMAGE'])
mdb.models['Model-1'].Material(name='ELSET_3_DAMAGE', objectToCopy=
    mdb.models['Model-1'].materials['ELSET_2_DAMAGE'])
mdb.models['Model-1'].Material(name='ELSET_4_DAMAGE', objectToCopy=
    mdb.models['Model-1'].materials['ELSET_3_DAMAGE'])
mdb.models['Model-1'].Material(name='ELSET_5_DAMAGE', objectToCopy=
    mdb.models['Model-1'].materials['ELSET_4_DAMAGE'])
mdb.models['Model-1'].Material(name='ELSET_6_DAMAGE', objectToCopy=
    mdb.models['Model-1'].materials['ELSET_5_DAMAGE'])
mdb.models['Model-1'].Material(name='ELSET_7_DAMAGE', objectToCopy=
    mdb.models['Model-1'].materials['ELSET_6_DAMAGE'])
mdb.models['Model-1'].Material(name='ELSET_8_DAMAGE', objectToCopy=
    mdb.models['Model-1'].materials['ELSET_7_DAMAGE'])
mdb.models['Model-1'].Material(name='ELSET_9_DAMAGE', objectToCopy=
    mdb.models['Model-1'].materials['ELSET_8_DAMAGE'])
mdb.models['Model-1'].HomogeneousSolidSection(material='ELSET_1_DAMAGE', name=
    'Section-1', thickness=None)
mdb.models['Model-1'].HomogeneousSolidSection(material='ELSET_2_DAMAGE', name=
    'Section-2', thickness=None)
mdb.models['Model-1'].HomogeneousSolidSection(material='ELSET_3_DAMAGE', name=
    'Section-3', thickness=None)
mdb.models['Model-1'].HomogeneousSolidSection(material='ELSET_4_DAMAGE', name=
    'Section-4', thickness=None)
mdb.models['Model-1'].HomogeneousSolidSection(material='ELSET_5_DAMAGE', name=
    'Section-5', thickness=None)
mdb.models['Model-1'].HomogeneousSolidSection(material='ELSET_6_DAMAGE', name=
    'Section-6', thickness=None)
mdb.models['Model-1'].HomogeneousSolidSection(material='ELSET_7_DAMAGE', name=
    'Section-7', thickness=None)
mdb.models['Model-1'].HomogeneousSolidSection(material='ELSET_8_DAMAGE', name=
    'Section-8', thickness=None)
mdb.models['Model-1'].HomogeneousSolidSection(material='ELSET_9_DAMAGE', name=
    'Section-9', thickness=None)
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['grain1'], sectionName=
    'Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['grain2'], sectionName=
    'Section-2', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['grain3'], sectionName=
    'Section-3', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['grain4'], sectionName=
    'Section-4', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['grain5'], sectionName=
    'Section-5', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['grain6'], sectionName=
    'Section-6', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['grain7'], sectionName=
    'Section-7', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['grain8'], sectionName=
    'Section-8', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-1'].sets['grain9'], sectionName=
    'Section-9', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].StaticStep(initialInc=1e-06, maxInc=0.05, maxNumInc=2000, 
    minInc=1e-09, name='Step-1', previous='Initial')
mdb.models['Model-1'].rootAssembly.deleteSets(setNames=('BC1', 'BC2', 'EM1x', 
    'EM1y', 'EM1z', 'ES1x1', 'ES1x2', 'ES1x3', 'ES1y1', 'ES1y2', 'ES1y3', 
    'ES1z1', 'ES1z2', 'ES1z3', 'FM1xy', 'FM1xz', 'FM1zy', 'FS1xy', 'FS1xz', 
    'FS1zy'))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='fix_x', 
    region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#10820000 #90000 #20 ]', ), ), 
    edges=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#0:2 #2 ]', ), )), u1=SET, u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET
    , ur3=UNSET)
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='fix_y', 
    region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#1a00 #1040 #100 ]', ), ), 
    edges=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#2200000 #0 #10000 #10 ]', ), )), u1=UNSET, u2=SET, u3=UNSET, ur1=
    UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='fix_z', 
    region=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    mask=('[#20841 ]', ), ), 
    faces=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#90 #e2200000 #41f ]', ), )), u1=UNSET, u2=UNSET, u3=SET, ur1=UNSET
    , ur2=UNSET, ur3=UNSET)
del mdb.models['Model-1'].boundaryConditions['fix_z']
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='fix_z', 
    region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#0 #e0000000 #41f ]', ), )), u1=UNSET, u2=UNSET, u3=SET, ur1=UNSET, 
    ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'disp_y', region=Region(
    cells=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    mask=('[#2 ]', ), ), 
    faces=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#60400000 #810 #40 ]', ), ), 
    edges=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#4 #400000 #400080 ]', ), )), u1=UNSET, u2=0.015, u3=UNSET, ur1=
    UNSET, ur2=UNSET, ur3=UNSET)
del mdb.models['Model-1'].boundaryConditions['disp_y']
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'disp_y', region=Region(
    faces=mdb.models['Model-1'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#60400000 #810 #40 ]', ), )), u1=UNSET, u2=UNSET, u3=0.015, ur1=
    UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['Model-1'].boundaryConditions['disp_y'].setValues(u2=0.015, u3=
    UNSET)
mdb.models['Model-1'].boundaryConditions['fix_y'].setValuesInStep(stepName=
    'Step-1', ur1=0.0, ur2=0.0, ur3=0.0)
del mdb.jobs['9grain_partition']
del mdb.jobs['DDEHM_9RVE']
del mdb.jobs['RVE_9_2D']
del mdb.jobs['RVE_9_2D_Hex']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Direct_9grain', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Model-1'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    kinematicSplit=AVERAGE_STRAIN, hourglassControl=ENHANCED, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT)), regions=(
    mdb.models['Model-1'].parts['Part-1'].cells.getSequenceFromMask((
    '[#3ffff ]', ), ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].materials.changeKey(fromName='ELSET_1_DAMAGE', toName=
    'ELSET1_DAMAGE')
mdb.models['Model-1'].materials.changeKey(fromName='ELSET_2_DAMAGE', toName=
    'ELSET2_DAMAGE')
mdb.models['Model-1'].materials.changeKey(fromName='ELSET_3_DAMAGE', toName=
    'ELSET3_DAMAGE')
mdb.models['Model-1'].materials.changeKey(fromName='ELSET_4_DAMAGE', toName=
    'ELSET4_DAMAGE')
mdb.models['Model-1'].materials.changeKey(fromName='ELSET_5_DAMAGE', toName=
    'ELSET5_DAMAGE')
mdb.models['Model-1'].materials.changeKey(fromName='ELSET_6_DAMAGE', toName=
    'ELSET6_DAMAGE')
mdb.models['Model-1'].materials.changeKey(fromName='ELSET_7_DAMAGE', toName=
    'ELSET7_DAMAGE')
mdb.models['Model-1'].materials.changeKey(fromName='ELSET_8_DAMAGE', toName=
    'ELSET8_DAMAGE')
mdb.models['Model-1'].materials.changeKey(fromName='ELSET_9_DAMAGE', toName=
    'ELSET9_DAMAGE')
mdb.models['Model-1'].sections['Section-1'].setValues(material='ELSET1_DAMAGE', 
    thickness=None)
mdb.models['Model-1'].sections['Section-2'].setValues(material='ELSET2_DAMAGE', 
    thickness=None)
mdb.models['Model-1'].sections['Section-3'].setValues(material='ELSET3_DAMAGE', 
    thickness=None)
mdb.models['Model-1'].sections['Section-4'].setValues(material='ELSET4_DAMAGE', 
    thickness=None)
mdb.models['Model-1'].sections['Section-5'].setValues(material='ELSET5_DAMAGE', 
    thickness=None)
mdb.models['Model-1'].sections['Section-6'].setValues(material='ELSET6_DAMAGE', 
    thickness=None)
mdb.models['Model-1'].sections['Section-7'].setValues(material='ELSET7_DAMAGE', 
    thickness=None)
mdb.models['Model-1'].sections['Section-8'].setValues(material='ELSET8_DAMAGE', 
    thickness=None)
mdb.models['Model-1'].sections['Section-9'].setValues(material='ELSET9_DAMAGE', 
    thickness=None)
mdb.models['Model-1'].parts['Part-1'].deleteMesh()
mdb.models['Model-1'].parts['Part-1'].seedPart(minSizeFactor=0.1, size=0.3)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0 #1ff0 #0 #3fe00000 ]', ), ), name='grain1')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#3fe00 #0:3 #1ff0000 ]', ), ), name='grain2')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0 #80000000 #fc0000ff #7 ]', ), ), name='grain3')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0 #3fe000 #0 #1ff000 ]', ), ), name='grain4')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0:2 #3ffff00 ]', ), ), name='grain5')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#1ff #0:3 #fe000000 #3 ]', ), ), name='grain6')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#f8000000 #f #0 #c0000000 #7f ]', ), ), name='grain7')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#7fc0000 #0:3 #ff80 ]', ), ), name='grain8')
mdb.models['Model-1'].parts['Part-1'].Set(elements=
    mdb.models['Model-1'].parts['Part-1'].elements.getSequenceFromMask(mask=(
    '[#0 #7fc00000 #0 #ff8 ]', ), ), name='grain9')
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by damin on 2020_09_04-18.36.52; build 6.14-3 2015_02_02-15.14.46 134785
